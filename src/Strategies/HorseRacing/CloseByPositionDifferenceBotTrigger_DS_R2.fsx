// Code generated by DeepSeek Chat (29.8.2025)

module BfexplorerBot

#I @"C:\Program Files\BeloSoft\Bfexplorer\"

#r "BeloSoft.Data.dll"
#r "BeloSoft.Betfair.API.dll"
#r "BeloSoft.Bfexplorer.Domain.dll"
#r "BeloSoft.Bfexplorer.Trading.dll"
#r "BeloSoft.Bfexplorer.Service.Core.dll"

open System
open System.ComponentModel.DataAnnotations

open BeloSoft.Data
open BeloSoft.Bfexplorer.Domain
open BeloSoft.Bfexplorer.Trading

/// <summary>
/// SelectionPositionData
/// </summary>
type SelectionPositionData =
    {
        Selection : Selection
        [<DisplayFormat (DataFormatString = "{0}")>]
        PreviousPosition : int
        [<DisplayFormat (DataFormatString = "{0}")>]
        CurrentPosition : int
        [<DisplayFormat (DataFormatString = "{0:n2}")>]
        CurrentOdds : float
    }

    static member DataKey = "SelectionPositionData" 

    [<DisplayFormat (DataFormatString = "{0}")>]
    member this.PositionDifference 
        with get () = this.PreviousPosition - this.CurrentPosition

    override this.ToString () = 
        sprintf "%s: Position %d -> %d (Diff: %d) | Odds: %.2f" 
            this.Selection.Name 
            this.PreviousPosition 
            this.CurrentPosition 
            this.PositionDifference
            this.CurrentOdds

    interface ISelection with
        member this.GetSelection () = this.Selection

    static member Create (selection : Selection, previousPosition : int, currentPosition : int) =
        {
            Selection = selection
            PreviousPosition = previousPosition
            CurrentPosition = currentPosition
            CurrentOdds = selection.LastPriceTraded
        }

/// <summary>
/// TriggerStatus
/// </summary>
type TriggerStatus =
    | Initialize
    | MonitorPositions
    | ExecuteCloseAction
    | ReportError of string

/// <summary>
/// CloseByPositionDifferenceBotTrigger
/// </summary>
type CloseByPositionDifferenceBotTrigger (market : Market, selection : Selection, botName : string, botTriggerParameters : BotTriggerParameters, myBfexplorer : IMyBfexplorer) =
    inherit BotTriggerBase (market, selection, botName, botTriggerParameters, myBfexplorer)

    let mutable triggerStatus = TriggerStatus.Initialize
    let mutable previousPositions : (Selection * int) list = []
    let mutable selectionsToClose : Selection list = []

    let isMyHorseRacingMarket () =
        market.MarketInfo.BetEventType.Id = 7 && market.MarketDescription.MarketType = "WIN"

    let setErrorStatus errorMessage =
        triggerStatus <- TriggerStatus.ReportError errorMessage

    let getCurrentPositions () =
        getActiveSelections market
        |> List.sortBy (fun s -> s.LastPriceTraded)
        |> List.mapi (fun index selection -> (selection, index + 1))

    let updateSelectionPositions (currentPositions : (Selection * int) list) =
        let positionData = 
            currentPositions
            |> List.map (fun (selection, currentPos) ->
                let previousPos = 
                    match previousPositions |> List.tryFind (fun (s, _) -> s.Identity.Id = selection.Identity.Id) with
                    | Some (_, pos) -> pos
                    | None -> currentPos
                
                SelectionPositionData.Create(selection, previousPos, currentPos)
            )
            |> List.sortBy (fun data -> data.CurrentPosition)

        previousPositions <- currentPositions
        positionData

    let checkTriggerConditions (bot : BotTriggerBase) (positionData : SelectionPositionData list) =
        let positionDifference = defaultArg (botTriggerParameters.GetParameter<int> "PositionDifference") 2
        let minimalFavouriteOdds = defaultArg (botTriggerParameters.GetParameter<float> "MinimalFavouriteOdds") 0.0
        let showPositionChanges = defaultArg (botTriggerParameters.GetParameter<bool> "ShowPositionChanges") false

        // Check if favorite odds are below threshold
        let favourite = positionData |> List.tryFind (fun data -> data.CurrentPosition = 1)
        match favourite with
        | Some fav when fav.CurrentOdds <= minimalFavouriteOdds && minimalFavouriteOdds > 0.0 ->
            // Close all monitored horses if favorite odds are too low
            positionData |> List.map (fun data -> data.Selection)
        | _ ->
            // Check for position drops
            let triggeredSelections =
                positionData
                |> List.filter (fun data -> 
                    data.PositionDifference >= positionDifference && data.PositionDifference > 0)
                |> List.map (fun data -> data.Selection)

            // Log position changes if enabled
            if showPositionChanges then
                positionData
                |> List.filter (fun data -> data.PreviousPosition <> data.CurrentPosition)
                |> List.iter (fun data -> 
                    bot.Report(sprintf "Position change: %s %d -> %d" data.Selection.Name data.PreviousPosition data.CurrentPosition))

            triggeredSelections

    interface IBotTrigger with

        /// <summary>
        /// Execute
        /// </summary>
        member this.Execute () =
            match triggerStatus with
            | TriggerStatus.Initialize ->

                if isMyHorseRacingMarket ()
                then                   
                    // Initialize with current positions
                    previousPositions <- getCurrentPositions()
                    triggerStatus <- TriggerStatus.MonitorPositions
                    
                    this.Report "CloseByPositionDifferenceBotTrigger initialized. Monitoring position changes..."
                    TriggerResult.WaitingForOperation
                else
                    TriggerResult.EndExecutionWithMessage "You can execute this bot only on a horse racing WIN market!"

            | TriggerStatus.MonitorPositions ->
                let currentPositions = getCurrentPositions()
                let positionData = updateSelectionPositions currentPositions
                
                selectionsToClose <- checkTriggerConditions this positionData
                
                if not selectionsToClose.IsEmpty then
                    triggerStatus <- TriggerStatus.ExecuteCloseAction
                    TriggerResult.WaitingForOperation
                else
                    TriggerResult.WaitingForOperation

            | TriggerStatus.ExecuteCloseAction ->
                if not selectionsToClose.IsEmpty then
                    // Report which selections will be closed
                    selectionsToClose
                    |> List.iter (fun selection -> 
                        this.Report(sprintf "Closing position for: %s (position drop detected)" selection.Name))
                    
                    TriggerResult.ExecuteActionBotOnSelectionsAndContinueToExecute (selectionsToClose, true)
                else
                    triggerStatus <- TriggerStatus.MonitorPositions
                    TriggerResult.WaitingForOperation

            | TriggerStatus.ReportError errorMessage -> TriggerResult.EndExecutionWithMessage errorMessage

        /// <summary>
        /// EndExecution
        /// </summary>
        member _this.EndExecution () =
            ()
