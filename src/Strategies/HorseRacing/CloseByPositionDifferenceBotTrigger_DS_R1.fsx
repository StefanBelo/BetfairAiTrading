// Code generated by DeepSeek, a similar code was generated by GPT-4.1

#I @"E:\Projects\BetfairAiTrading\data\Fsi"
#r @"E:\Projects\BetfairAiTrading\data\Fsi\BeloSoft.Bfexplorer.Domain.dll"
#r @"E:\Projects\BetfairAiTrading\data\Fsi\BeloSoft.Bfexplorer.Service.dll"
#r @"E:\Projects\BetfairAiTrading\data\Fsi\BeloSoft.Bfexplorer.Trading.dll"

open System
open BeloSoft.Bfexplorer.Domain
open BeloSoft.Bfexplorer.Service
open BeloSoft.Bfexplorer.Trading
open BeloSoft.Bfexplorer.Trading.BotTriggerModels

[<AutoOpen>]
module CloseByPositionDifferenceBotTrigger =

type TriggerStatus =
    | Initialize
    | Monitor of SelectionState list

and SelectionState = {
    Selection : Selection
    InitialPosition : int
    CurrentPosition : int
}

let execute (botTriggerParameters : BotTriggerParameters) (market : Market) =
    let positionDifference = botTriggerParameters.GetParameter<int>("PositionDifference")
    let minimalFavouriteOdds = botTriggerParameters.GetParameter<float>("MinimalFavouriteOdds")
    let showPositionChanges = botTriggerParameters.GetParameter<bool>("ShowPositionChanges")

    // Validate market type
    if market.MarketInfo.BetEventType.Name <> "Horse Racing" || market.MarketInfo.MarketType <> "WIN" then
        TriggerResult.EndExecutionWithMessage "This bot only works on Horse Racing WIN markets"
    else
        let initialize () =
            let selections = 
                market.Selections
                |> Seq.filter (fun s -> s.Status = SelectionStatus.Active)
                |> Seq.sortBy (fun s -> s.LastPriceTraded)
                |> Seq.mapi (fun i s -> 
                    { 
                        Selection = s
                        InitialPosition = i + 1
                        CurrentPosition = i + 1 
                    })
                |> Seq.toList

            if selections.IsEmpty then
                TriggerResult.EndExecutionWithMessage "No active selections found"
            else
                TriggerResult.WaitingForOperation (Monitor selections)

        let monitor (selections : SelectionState list) =
            // Update current positions
            let updatedSelections =
                selections
                |> List.map (fun state ->
                    let newPosition = 
                        market.Selections
                        |> Seq.filter (fun s -> s.Status = SelectionStatus.Active)
                        |> Seq.sortBy (fun s -> s.LastPriceTraded)
                        |> Seq.findIndex (fun s -> s.Id = state.Selection.Id)
                        |> (+) 1

                    if showPositionChanges && newPosition <> state.CurrentPosition then
                        botTriggerParameters.Report(sprintf "%s position changed from %d to %d" state.Selection.Name state.CurrentPosition newPosition)

                    { state with CurrentPosition = newPosition }
                )

            // Check trigger conditions
            let selectionsToClose = 
                updatedSelections
                |> List.filter (fun state ->
                    // Position difference condition
                    (state.CurrentPosition - state.InitialPosition) >= positionDifference ||
                    // Favorite odds condition
                    (state.CurrentPosition = 1 && state.Selection.LastPriceTraded < minimalFavouriteOdds)
                )

            if selectionsToClose.IsEmpty then
                TriggerResult.WaitingForOperation (Monitor updatedSelections)
            else
                TriggerResult.ExecuteActionBotOnSelectionsAndContinueToExecute(
                    selectionsToClose |> List.map (fun s -> s.Selection),
                    (fun _ -> TriggerResult.WaitingForOperation (Monitor updatedSelections))
                )

        match botTriggerParameters.Status with
        | None -> initialize ()
        | Some status ->
            match status with
            | :? TriggerStatus as triggerStatus ->
                match triggerStatus with
                | Initialize -> initialize ()
                | Monitor selections -> monitor selections
            | _ -> TriggerResult.EndExecution
